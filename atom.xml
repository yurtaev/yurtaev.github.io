<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yurtaev.link/</id>
    <title>@yurtaev</title>
    <updated>2021-08-07T07:00:49.900Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <author>
        <name>Egor Yurtaev</name>
        <email>yurtaev.egor+blog@gmail.com</email>
        <uri>https://yurtaev.link</uri>
    </author>
    <link rel="alternate" href="https://yurtaev.link"/>
    <link rel="self" href="https://yurtaev.link/atom.xml"/>
    <subtitle>My most recent blog posts @yurtaev</subtitle>
    <icon>https://yurtaev.link/favicon.png</icon>
    <entry>
        <title type="html"><![CDATA[«JavaScript - язык будущего?»]]></title>
        <id>https://yurtaev.link/2015/07/14/future-of-javascript</id>
        <link href="https://yurtaev.link/2015/07/14/future-of-javascript"/>
        <updated>2015-07-14T14:44:44.000Z</updated>
        <content type="html"><![CDATA[<p>История началась с письма:</p>
<blockquote>
<p>&quot;... пора мигрировать код с Питона на Node.js ...&quot;</p>
</blockquote>
<p>Этот вопрос у себя в голове прокручиваю очень давно и прийти к однозначному ответу не могу, так как мыслей у меня достаточно много. Попытаюсь порассуждать вслух.</p>
<p>Что есть у нас:</p>
<ul>
<li>Небольшая команда разработчиков</li>
<li>Backend разработка на: python/django</li>
<li>Frontend разработка - JavaScript/CoffeeScript</li>
<li>Бэкендеры и фронтендеры чаще всего в одном лице</li>
<li>Достаточно большой опыт и набор знаний у разработчиков по python</li>
</ul>
<p><strong>Вопрос</strong>: Имеет ли смысл использовать язык JavaScript для новых проектов при текущем наборе людей/при обучение новых людей?</p>

<p>Для этого следует ответить на следующие вопросы:</p>
<ul>
<li>Какие существуют веб-фреймворки для node.js? Качество фреймворков? С какими из используемых нами фреймворков их можно сравнить по функциональности (Django, Flask, etc)?</li>
<li>Качество инфраструктуры node.js (пакеты, утилиты)? В сравнении с Python (pip vs npm)?</li>
<li>Действительно ли асинхронность node.js дает преимущества?</li>
<li>Существуют ли ORM для node.js?</li>
<li>Каков порог вхождения в технологию? Может ли разработчик без опыта front-end писать back-end на node.js?</li>
<li>Каков сегодняшний тренд? Будет ли node.js мейнстримом?</li>
<li>Минусы и минусы node.js?</li>
</ul>
<h2>Существуют ли аналоги Django?</h2>
<p>Это один из самых критичных вопросов в ситуации, когда половина новых проектов представляет из себя сайты средней сложности. Что такое сайты средней сложности? Это сервисы вроде мини-instagram/pinterest, где есть социальный функционал или контентные сайты, для которых нужна только админка, что бы добавлять контент, и минимальная логика для обычных пользователей.</p>
<p>Я с уверенностью могу сказать, что реальных аналогов django/rails нет, и с каждым годом я в этом убеждаюсь всё больше, т.к время тут играет очень важную роль. Оба проекта были выпущены в начале 2000-х, и за десятилетние развитие разработчики фреймворков смогли отшлифовать и сбалансировать свой функционал почти до идеального состояния.</p>
<p>Да, если загуглить что-то типа <code>аналог rails для языка {name}</code>, то можно заметить, что на каждом языке есть проекты, которые называют себя аналогом рельсов. Но, если следовать правилу 80/20, то они реализуют базовый набор необходимого функционала, а вот для реализации остальных 20% им потребуются годы.</p>
<p>С виду, если пройтись по туториалам всех популярных веб-фреймворкам, то покажется, что они все очень простые для изучения, но на деле просты только при написание хеллоу ворлдов, а начинать серьезный проект я бы не стал по нескольким причинам:</p>
<ul>
<li>
<p>Проблемы базового функционала и предоставляемого API фреймворка</p>
<p>Как и django, так и рельсы обладают очень обширным внутренним API (на мой вкус, у django лучше, просто мне не нравится программирование, построенное на соглашениях), при помощи которого можно малыми силами реализовать функционал, которого из коробки нет во фреймворке. Например: отлавливать событие регистрации пользователя и отправки ему письма. Я уже не говорю, что можно использовать из самой коробки:</p>
<ul>
<li>Замечательные <em>Class-based views</em>, использование которых уменьшает количество повторяющегося кода</li>
<li>Замечательная ORM. Нет правда, в django она одна из лучших и покрывает 95% случаев</li>
<li>Security. Мало кто думает о clickjacking/xss/SQL injection/etc</li>
<li>Админка из коробки!</li>
<li>и т.д</li>
</ul>
<p>Есть ли решения на JavaScript со схожими возможностями? Нет! Все эти <a href="http://sailsjs.org/">SailsJS</a>/<a href="http://expressjs.com/">Express</a>/<a href="http://koajs.com/">Koa</a>/<a href="https://github.com/sindresorhus/awesome-nodejs#web-frameworks">etc</a> тянут только на звание мини веб-фреймворков, но не как на аналог django/rails. Я не говорю что они плохи, они решают свою маленькую задачу, но это не альтернатива django, просто они из разных весовых категорий.</p>
</li>
<li>
<p>Количество и качество сторонних батареек.</p>
<p>Тут я даже не знаю какие примеры приводить. Из-за того, что нет четкого лидера, усилия сообщества размазаны по нескольким решениями, и опять же фактор времени играет важную роль.</p>
<p>Достаточно попробовать написать сайт с поддержкой авторизации через социальные сети, фоновыми задачами а-ля <a href="http://www.celeryproject.org/">celery</a>, прозрачной загрузкой файлов в S3, с ресайзом картинок, с социальными фитчами: фоловить/дружить/общаться и т.д. Да, возможно, для половины функционала найдутся батарейки, но возможности и качество их будут не на высоте. Достаточно изучить существующие решения для работы с очередями.</p>
</li>
</ul>
<p>Выводы об альтернативах django/rails с одной стороны очевидны, но не стоит забывать о том, что веб двигается немного в другую концептуальную сторону в плане взаимодействия клиент/сервера, но об этом в выводах.</p>
<h2>Инфраструктура</h2>
<h3>pip vs. npm</h3>
<p>Тут коротко. Всё что угодно лечше pip&#x27;а!</p>
<h3>Коммьюнити/библиотеки/сервисы</h3>
<p>Коммьюнити очень большое. Но у php коммьюнити тоже не маленькое! Таким образом, это не показатель. Но отмечу, что самые интересные новые решения появляются из этого коммьюнити. P2P торенты/звонки/чаты в браузере, изоморфные приложения, которые не привязаны к клиент/серверному представлению, десктоп приложения на основе Node.js и т.п. На мой взгляд сейчас от этого немного пользы, но тренд появления на js прикольных вещей только увеличивается из года в год.</p>
<p>Большое коммьюнити приводит к появлению большого количества библиотек. Но это снова не показатель. Очень много библиотек плохого качества. Много интересных библиотек, которые перестали поддерживаться. Хуже всего много раскрученных библиотек, которые форсируют плохую архитектуру (применение инструментов для неподходящих задач - бич всей разработки в целом). Библиотек много, но нет устоявшегося стека. Для большинства важных задач существует как минимум два решения, с одной стороны всегда хорошо, когда есть выбор, а с другой - это очень сильно разделяет сообщество. Можно каждый раз начинать новый проект и за основу брать еще не испробованные решения. Тут у любого начнут разбегаться глаза (при условии, что разработчик смотрит по сторонам, иначе до конца жизни будет писать SPA на jQuery), еще сложнее из этого разнообразия подобрать хороший набор повседневных инструментов. Черт возьми, да, только для сборки проектов существует 5+ решений, каждый из которых вполне достоин. Рассуждать и спорить на эту тему можно бесконечно, и всё будет сводится к большому ИМХО.</p>
<p>Количество сервисов для JavaScript будет только расти дальше. Недавний пример <a href="http://aws.amazon.com/lambda/">AWS Lambda</a> в которой поддержка платформы Node.js была первой. <a href="https://parse.com/">Parse</a>/<a href="https://cloud.google.com/nodejs/">Google Node.js</a>/etc, их будет только больше. Я считаю это всё ерундой, я за движение <a href="http://nobackend.org/solutions.html">noBackend</a>, а это означает почти только JavaScript.</p>
<h2>Про асинхронность</h2>
<p>Язык для 2015 года отвратительный. Предоставляемый API для написания асинхронного кода - просто слезы, в сочетание с другой болью вроде передачей контекста исполнения, ... Все это просто превращается в кровавую бойню. Сейчас новый тренд - хвалить новый стандарт  ~~ECMAScript 6~~ ECMAScript 2015 и кричать, что он решит ВСЕ проблемы. Да, возможно, что-то он и решит, но, во-первых, он решает всё с таким типичным привкусом js, а, во-вторых, принесет новые проблемы (дополнительные контексты при задании дефолтных значений аргументов SERIOUSLY?). Тема ECMAScript 2015 заслуживает отдельного поста, у меня есть запас ярости по этому вопросу.</p>
<h2>Существуют ли ORM для node.js?</h2>
<p><a href="https://github.com/sindresorhus/awesome-nodejs#database">Есть. Много. Больше чем надо.</a> Есть ли достойные решения? Можно найти несколько решений уровня <code>sqlalchemy</code>, но меня больше интересует интеграция ORM с веб-фреймворком для того, что бы генерировать формы, REST API, админки, отчеты и т.д. А так да, есть вполне достойные варианты, даже с миграциями. НО я только с ними игрался, и как поведут они себя в продакшене сказать не могу.</p>
<h2>Обучение</h2>
<p>Обучать JavaScript&#x27;ту как первому языку я бы не стал. У меня по этому вопросу есть пара мыслей:</p>
<ul>
<li>Начинать нужно со строго типизированного языка. Возможно, потому что я начинал с Pascal и как мне кажется именно на таких языках приходит понимание о системах типов и т.д</li>
<li>Первым языком должен быть язык, на котором точно не будешь работать. Это должно стать толчком на изучение второго языка, а где второй, там и третий. Хороший разработчик должен знать несколько языков.</li>
</ul>
<p>Но если нам нужны послушные обезьянки, которые 24/7/365 способны заниматься монотонной разработкой похожих друг на друга приложений, то не могу привести доводов против.</p>
<p>Но тут нужно понимать, что backend ≠ frontend разработке, и это совершенно разные сферы деятельности. Громкие слова о том, что один разработчик будет писать нам и сервер, и клиентское приложение, хороши только на бумаге, еще некоторые фантазируют, что на этом можно сэкономить, возьмем одного студента, и он будет работать за двоих. Так это не работает: либо на выходе будет получаться дольше и очень плохо, либо, если всё же найдете упоротого чувака, который будет способен всё делать, то ему придется платить за двоих или за полтора человека, но при этом ириски© будут больше. Но всё же, если целенаправленно планомерно развивать команду вширь, то можно добиться хороших результатов, это потребует ресурсов, и это не значит что с другим стеком это не сработало так же.</p>
<h2>Будущее JavaScript</h2>
<p>JavaScript - это платформа будущего. То, на что метила Java в свое время, теперь почти победил JavaScript. JavaScript это:</p>
<ul>
<li>Весь фронтенд</li>
<li>Бэкенд</li>
<li>Мобильные приложения</li>
<li>Десктоп приложения</li>
<li>Embedded. Холодильники/часы/чайники/IoT</li>
</ul>
<p>Я тут имею ввиду под JavaScript не просто язык, а платформу, на которой, например, можно запускать другие языки. Несмотря на то, что я просто ненавижу чистый JavaScript, стоит признать, что он побеждает, к сожалению. А побеждает он только за счет того, что ему посчастливилось быть интегрированным в браузер, а браузер сейчас есть везде и нужен всем.</p>
<p>Все пытались влезть в эту нишу языков в браузере. Microsoft =&gt; silverlight, который умер, поверх которого можно было даже писать на python в браузере. <a href="https://www.dartlang.org/">Google =&gt; dart</a>, который скоро умрет. Sun =&gt; Java уже давно проиграли. Тут не надо быть большим аналитиком, чтобы понять, что все подобные попытки обречены на провал, потому что для победы нужно объединится всем, а это очень тяжелый шаг для гигантов. Только сейчас они делают попытки объединится и сделать общий стандарт для <a href="http://kripken.github.io/mloc_emscripten_talk/#/">asm.js</a>, и то под <a href="https://en.wikipedia.org/wiki/WebAssembly0022580">другим названием</a> т.к изначально это разработка Mozilla. И это объединение не против JavaScript, а за его улучшение. Так что у JavaScript как минимум есть будущее.</p>
<h2>Pre-Conclusions</h2>
<p>Прежде чем делать какие либо выводы, сначала нужно обговорить несколько моментов.</p>
<p>Первая проблема всей индустрии - это неумение выбирать подходящие инструменты под каждую конкретную задачу. Тут не важно, на чем писать, JavaScript или python. Выбрать язык X и думать, что вы нашли идеальный инструмент под все свои задачи, является ошибкой. Нужно постоянно смотреть по сторонам, иначе обречены на боль и страдания.</p>
<p>Вторая проблема - это думать, что выбрав правильно технологию, всё будет хорошо. Но на мой взгляд, фактор людей намного, намного важнее. Т.е можно писать хоть на php, но если это делают отличные спецы, то результат будет предсказуемо хороший, а вот группа приматов... Т.к это всё новое направление без большой готовой базы решений, разработчику придется самому находить решения поставленных задач, а для этого он должен обладать хорошим скилом и умением тащить сложные задачи.</p>
<p>Далее нужно немного пофантазировать, куда будет двигаться индустрия хотя бы ближайшие 3-5 лет.</p>
<p>Django - это очень хороший инструмент, но это инструмент который решает задачи прошлого. Т.е это инструмент для создания сайтов web 1.0 (что бы это не значило), а всё постепенно двигается в другую сторону, когда у нас большие жирные приложения работают на стороне клиента в браузере, а сервер нужен только для того что бы получить данные, которые уже отобразятся нужным образом на стороне клиента. Т.е максимум от сервера нужен только REST API для получения данных и всё (хранения файлов, рассылка писем и т.п давно уже заменяются облачными сервисами).</p>
<p>Связка django + rest-framework  - одна из лучших для клепания REST API. А вот делать реалтаймовые приложения с websockets на django  - уже плохая идея. Тут либо уходить на решения типа tornado/twisted, вокруг которых батареек кот наплакал, либо приглядываться к решениям поверх Node.js, где с этим немного получше. Если посмотреть на roadmap django, то в ближайшем будущем кардинально ничего не поменяется.</p>
<p>С серверной частью немного разобрались, но JavaScript метит еще в несколько направлений. Это мобильная разработка и десктоп.</p>
<p>С десктоп всё просто, нативные приложения потихоньку вымирают, взамен у нас жирные веб приложения, а тем, кому лень еще и писать нативные приложения с нуля, пилят приложения поверх ~~node-webkit~~ nw.js. Почему? Да потому что это проще и быстрее. Когда есть уже готовые веб-приложения, то проще перенести наработки в виде js, чем писать под все платформы с нуля.</p>
<p>С мобильными всё примерно тоже самое. Т.к у меня на телефоне не стоит ни одной игрушки, то я не нашел ни одного приложения, которого я бы теоретически не смог бы написать на JavaScript. Т.е большая часть приложений заключается в том, что бы сходить дернуть REST API и показать что-то пользователю.</p>
<h2>Conclusions</h2>
<ul>
<li>Если проекты хоть как-то касаются веба, то вам однозначно нужны JavaScript разработчики. Даже люксофт уже начал проводить тренинги для своих овощей на тему JavaScript/AngularJS</li>
<li>Если в компании еще нет устоявшегося серверного стека, то я бы не торопился окунаться в мир Node.js. Исключение, когда есть упоротые люди, готовые тащить это направление</li>
<li>Если компания заинтересована в оптимизации процесса разработки проектов и в будущем конкурировать в новых нишах, и есть ресурсы, то потихоньку стоит тратить ресурсы на исследования, делать прототипы и если есть подходящие задачи, пробовать решать их на новом стеке. Это позволит нарабатывать полезные знания, и когда придет время, иметь конкурентные преимущества перед остальными. Например, нужно сделать новостное мобильное приложение и вместо того, чтобы делать его усилиями трех команд (которые нужны в штате) для разных платформ и за ~500 часов, оно будет делаться двумя разработчиками и за 200 часов при этом, не уступая качеством, и дешевле в поддержке, ..., думаю, выгода очевидна</li>
<li>Если уже есть наработанный стек, то я бы не стал кидаться срочно всё делать на новом</li>
</ul>
<p><strong>Выбор за вами...</strong></p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Веб-компоненты как Human API к фронтенд библиотекам]]></title>
        <id>https://yurtaev.link/2015/01/27/Web-Components-as-Human-API</id>
        <link href="https://yurtaev.link/2015/01/27/Web-Components-as-Human-API"/>
        <updated>2015-01-27T01:05:50.000Z</updated>
        <content type="html"><![CDATA[<p>Смотрю я на вновь оживший тренд по веб-компонентам и на обсуждения вокруг этого, и понимаю что не видать еще лет 5-ть минимум упрощения во фронтенд разработке. А тем временем требования к приложениям становятся всё сложнее.</p>
<p>Теперь это не просто html страничка с ajax запросами на нажатия кнопочек, а полноценное развесистое приложение в браузере, с поддержкой WebSockets для двусторонней связи, с обработкой файлов прям из js на стороне клиента, да еще и оффлайн работой.</p>

<p>Каждую неделю выходит ~30 различных библиотек со схожим функционалом что и предыдущие 300. Каждый тянет одеяло на себя вместо того что бы объединить усилия и черт возьми наконец-то разгрести этот ад что творится во фронтенде. Мне сложно представить как в это время новенькие вообще могут успешно стартануть в веб разработке при таком количестве разнообразных путей для решения одной и той же задачи.</p>
<p>И не удивительно что люди уже не способны выбрать нужный инструмент под задачу, потому что искать в океане поделок можно очень долго, и не факт что найденное решение внутри окажется нормальным. Тут конечно еще играет свою роль факт что люди идиоты и когда читаешь наезды типа – «ангуляр плохой потому что тормозит на 2000-ях биндингах», да конечно тормозит! потому что ты идиот! в нормальном приложение не должно быть так. А потом появляется <a href="http://facebook.github.io/flux/">FLUX</a> архитектура которая как раз вот для задач когда эти самые 2000 биндингов нужны, но нет! мы будем писать <a href="https://meduza.io/">meduza.io</a> на <a href="http://facebook.github.io/react/">React</a> для отображения 27 статических новостей на страничке (на самом деле это круто что кто-то может себе позволить так поиграться в продакшене).</p>
<p>Короче мой посыл вообще не об этом, а о том что даже самые простые библиотеки требуют большого количества телодвижений и знаний. Например вот нужно обычному человеку (он может быть отличным OCaml разработчиком, но ему нафиг не надо знать как писать фронтенд) встроить в свой бложик красивые графики. И что же сейчас для этого надо сделать:</p>
<ol>
<li>Добавить все необходимые стили</li>
<li>Подключить все js зависимости + еще в нужно порядке (нормальных импортов то нет)</li>
<li>Добавить в документ какой-либо <code>&lt;div id=&quot;my-cool-chart&quot;&gt;&lt;/div&gt;</code> с нужным id</li>
<li>Написать с десяток строк когда для создания нужного графика с данными</li>
</ol>
<p>В самом просто варианте выглядит это примерно так:</p>
<pre><code class="language-html">&lt;script src=&quot;Chart.js&quot;&gt;&lt;/script&gt;
&lt;canvas id=&quot;myChart&quot; width=&quot;400&quot; height=&quot;200&quot;&gt;&lt;/canvas&gt;
&lt;script&gt;
    var data = {
        labels: [&#x27;mon&#x27;,&#x27;tue&#x27;,&#x27;wed&#x27;,&#x27;thu&#x27;,&#x27;fri&#x27;,&#x27;sat&#x27;,&#x27;sun&#x27;],
        datasets: [
            {
                data: [10,14,20,25,13,9,40]
            },
            {
                data: [40, 9, 13, 25, 20, 14, 10]
            }
        ]
    };
    var ctx = document.getElementById(&quot;myChart&quot;).getContext(&quot;2d&quot;);
    var myNewChart = new Chart(ctx).Line(data);
&lt;/script&gt;
</code></pre>
<p>Человек просто хотел добавить графики в свой бложик, а в итоге вынужден программировать на html/css/javascript.</p>
<p>И тут врываются веб-компоненты, которые совсем не про создание полноценных приложения, а про удобные/универсальные кирпичики из которых можно строить логику, не тратив много сил на то что бы положить кирпич в нужное место, в нужный лунный цикл и без докторской степени по кирпичам 2014 года.</p>
<p>И так как уже существует миллион готовых библиотек на все случай жизни, ближайшее время веб-компоненты будут из себя представлять мостик между низкоуровневым API для разработчиков и Human API которым без больших усилий сможет воспользоваться несчастный OCaml программист.</p>
<p>Возвращаясь к примеру с графиками, с веб-компонентами это будет уже выглядеть намного проще:</p>
<pre><code class="language-html">&lt;link rel=&quot;import&quot; href=&quot;chart-elements.html&quot;&gt;
&lt;chart-line
    width=&quot;400&quot; height=&quot;200&quot;
    labels=&quot;[&#x27;mon&#x27;,&#x27;tue&#x27;,&#x27;wed&#x27;,&#x27;thu&#x27;,&#x27;fri&#x27;,&#x27;sat&#x27;,&#x27;sun&#x27;]&quot;
    values=&quot;[[10,14,20,25,13,9,40], [40, 9, 13, 25, 20, 14, 10]]&quot;&gt;
&lt;/chart-line&gt;
</code></pre>
<p>Никакого программирования, только необходимые данные <em>(но как и весь фрондент =&gt; всё также уродливо ^_^ )</em></p>
<p>Коротко:</p>
<ul>
<li>Можно добавлять новые примитивы в html и заниматься складыванием кирпичиков, а не программированием каждого отдельного кирпича</li>
<li>Веб-компоненты это не про написание приложений, а про расширение функционала html. Вместо того что бы подключать библиотеку для создания табов, можно будет использовать <code>&lt;tabs&gt;&lt;/tabs&gt;</code> прямо в вёрстке</li>
<li>Писать компоненты больно =&gt; templates/decorators/custom elements/shadow DOM (ангуляровцы будут как дома)</li>
<li>Веб-компоненты это очень, очень сыро и еще сто раз поменяют спецификацию</li>
<li>Любые попытки сделать универсальное решение сказываются на Human API и уши разухабистого внутреннего API будут выглядеть еще хуже чем 20-ть строк кода на js</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linkstash #3 #4]]></title>
        <id>https://yurtaev.link/2015/01/24/Linkstash-4</id>
        <link href="https://yurtaev.link/2015/01/24/Linkstash-4"/>
        <updated>2015-01-24T14:35:02.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li><a href="http://nerves-project.org/gettingstarted.html">Erlang для embedded устройств</a> круто, но по моему для этого есть более подходящие языки #erlang #embedded</li>
<li>PhantomJS 2.0 запланирован на 23 января</li>
<li><a href="http://codehipsters.com/2015/01/14/indutny-interview.html">Фёдор Индутный, io.js и столовые приборы</a> #nodejs</li>
<li><a href="http://databricks.com/blog/2015/01/15/improved-driver-fault-tolerance-and-zero-data-loss-in-spark-streaming.html">Improved Fault-tolerance and Zero Data Loss in Spark Streaming</a> #spark #streaming</li>
<li><a href="http://aadrake.com/command-line-tools-can-be-235x-faster-than-your-hadoop-cluster.html">Command-line tools can be 235x faster than your Hadoop cluster</a> Ну как бы странно использовать hadoop для данных влазящих на одну ноду #tools #Command-line #Hadoop</li>
<li><a href="http://webcomponents.org/presentations/high-performance-web-components/">High Performance Web Components</a> Вместо того что бы делать веб разработку проще, все тянут одеяло на себя и делают только хуже. У меня уже голова плавится от многообразия всего (которое не работает везде на 100%), что будет через 5 лет?! #frontend #web components</li>
<li><a href="http://dev.by/lenta/main/krasavitsa-sportsmenka-i-prosto-programmist">Красавица, спортсменка и просто программист</a> Интервью с разработчиком PyCharm. Цитата из текста:
<blockquote>
<p>если бы полицейские были, как программисты, то по ночам наряжались бы в бэтменов и боролись с преступностью в своё удовольствие</p>
</blockquote>
</li>
</ul>

<ul>
<li><a href="http://jpetazzo.github.io/2015/01/13/docker-mount-dynamic-volumes/">Способ приаттачить сторадж в запущенный контейнер</a> Не знаю зачем, может когда-нибудь пригодится #docker #hint</li>
<li><a href="http://technolo-g.com/intro-to-docker-swarm-pt1-overview/">Серия из 3-х статей про Docker Swarm</a> Выглядит это круто, но пока очень сыро. В общем связка docker swarm + machine + ~~новый тул замены fig с поддержкой кластеров~~ compose выглядит перспективно. #docker #swarm</li>
<li><a href="http://blog.drewolson.org/blog/2015/01/23/composable-queries-with-ecto/">Composable Queries with Ecto</a> С одной стороны мне не очень нравится а-ля activerecord стайл т.к я вообще не понимаю в какой SQL запрос развернется + на сложных примерах красота вся пропадает, но с другой запросы вида:
query = from w in Weather,
where: w.prcp &gt; 0 or is_nil(w.prcp),
select: w
впечатляют, хоть на вид это почти повторение SQL запроса. #elixir #ecto</li>
<li><a href="http://dev.by/lenta/main/intervyu-s-krisom-kasperski-aka-mysch-h">Интервью c мыщъх</a> но конечно хотелось бы прочитать, а еще лучше увидеть полный вариант :)</li>
<li><a href="http://www.reedbeta.com/blog/2015/01/12/data-oriented-hash-table/">Data-Oriented Hash Table</a> #hash table</li>
<li><a href="http://reports.quickleft.com/css">Интересный анализ использования css с 8000 сайтов</a> Я так и знал что большинство забивает на префиксы! #css #report</li>
<li><a href="http://playkey.net/">Российская альтернатива сервису OnLive</a></li>
<li><a href="http://learningelixir.joekain.com/profiling-elixir/">Profiling Elixir</a> =&gt; <a href="http://learningelixir.joekain.com/profiling-elixir-2/">Часть 2</a> #elixir #profiling</li>
</ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linkstash #1]]></title>
        <id>https://yurtaev.link/2015/01/03/Linkstash-1</id>
        <link href="https://yurtaev.link/2015/01/03/Linkstash-1"/>
        <updated>2015-01-03T14:44:44.000Z</updated>
        <content type="html"><![CDATA[<p><em>Разгребаю свой список из <a href="https://chrome.google.com/webstore/detail/read-later-fast/decdfngdidijkdjgbknlnepdljfaepji?hl=ru">Read Later Fast</a>, поэтому много баянов...</em></p>
<h2>Frontend</h2>
<ul>
<li><a href="http://www.thedotpost.com/2014/11/james-halliday-substack-immutable-offline-webapps">Immutable offline webapps</a> 2015-ый будет годом нового баззворда «Offline First» который нужен 1% приложений #frontend #offline #video #slides</li>
<li>В туже тему <a href="http://jakearchibald.com/2014/offline-cookbook/">The offline cookbook</a> про будущее с ServiceWorker</li>
<li><a href="https://www.mircozeiss.com/a-radical-new-approach-to-developing-angularjs-apps/">A radical new approach to developing AngularJS apps</a> Годная статья по ангуляру, узнал пару полезных трюков #frontend #angularjs</li>
<li><a href="https://www.destroyallsoftware.com/talks/the-birth-and-death-of-javascript">THE BIRTH &amp; DEATH OF JAVASCRIPT</a> Очень крутой доклад. Прям новое направление в жанре стендап выступлений для программистов. Вспоминается сразу великий <a href="https://www.destroyallsoftware.com/talks/wat">WAT</a> #frontend #javascript #video #slides #best</li>
<li><a href="http://findguidelin.es/">Подборка стайлгайдов от различных сайтов</a> #frontend #guidelines #styleguide</li>
</ul>

<h2>Elixir</h2>
<ul>
<li><a href="https://github.com/sugar-framework/sugar">Разработчик sugar объявил о продолжение разработки</a> Очередной Rails-like фреймворк для Elixir. Ресурсов у них явно меньше чем у того же <a href="https://github.com/phoenixframework/phoenix">Phoenix</a> #elixir #web_framework</li>
<li><a href="http://joearms.github.io/2013/05/31/a-week-with-elixir.html">Армстронг поделился впечатлениями после недели с Elixir</a> Очень, очень круто #elixir</li>
<li><a href="https://github.com/batate/elixir-pipes">Расширение функционала пайпов для Elixir</a> #elixir #pipe</li>
</ul>
<h2>Other</h2>
<ol>
<li><a href="https://lists.torproject.org/pipermail/tor-dev/2014-December/007999.html">Очередная (обоснованная) критика в сторону секьюрности проекта</a> <a href="http://www.tribler.org/">Trible</a> И я уже почти перестал следить за проектом. Мало того что это здоровенный кусок тормозного кода на python, так и заявленную анонимность жду больше года. После получения абузы от HBO мой поиски анонимного способа получения/раздачи больших файлов завершились неудачей. Получил инвайт на проект в эту сторону, но разработка движется со скоростью жирной улитки. Да и вообще есть куча технических проблем в организации массовой анонимной сети для шаринга файлов, поэтому весь даркнет пропитан ностальгией по медленному интернету через диалап. #security #trible</li>
<li><a href="http://www.falkoriemenschneider.de/a__2014-09-17__Programming-without-objects.html">Programming without objects</a> Последнее время каждый раз когда я садился писать что-либо на ФП хотелось себя стукнуть за то что пытаюсь перенести свой опыт и чувство прекрасного из ООП. Меня дико бесит отсутствие чувства прекрасного при создание API к библиотеке с менее 10-тью методами. Вот сижу читаю книжки/бложики по ФП и киваю как всё правильно, а как сажусь писать чувствую себя ТП. Надо в 2015-ом накапливать опыт и чувство прекрасного по ФП. #fp #oop</li>
<li><a href="https://github.com/lfex/py">Distributed Python for the Erlang Ecosystem</a> #python #erlang #distributed</li>
<li><a href="http://www.mircozeiss.com/secure-couchdb-by-using-ssl-https/">Secure CouchDB by using SSL/HTTPS</a> #couchdb #guides</li>
<li><a href="http://santosh.io/2014/12/20/erlang-vs-nodejs---a-tale-of-two-concurrency-models.html">Из раздела юмор: «Erlang vs. NodeJS 1. A tale of two concurrency models»</a> Удивляюсь как люди такое способны сравнивать... #erlang #nodejs #humor</li>
<li><a href="http://nathanfriend.io/inspirograph/">Онлайн версия спирографа</a> #spirograph #online</li>
<li>Наткнулся на <a href="https://nats.io/">NATS</a> и <a href="http://www.bravenewgeek.com/dissecting-message-queues/">бенчмарки MQ</a> Огорчает скудность документации у NATS. #MQ #benchmark</li>
<li><a href="https://www.versioneye.com">Сервис по отслеживанию обновлений зависимостей проекта</a> Вот так всегда, все гениальные идей кто-то реализует за тебя. #tools #versioncontrol #requirements</li>
<li><a href="http://blog.tutum.co/2014/08/07/using-cadvisor-to-monitor-docker-containers/">Using cAdvisor to Monitor Docker Containers</a> Пока еще не совсем понимаю профита от мониторинга контейнеров, но радует наличие таких тулзов. Вангую что в первой половине 2015 года Docker Inc купят за пару инстацентов. #docker #monitoring</li>
<li><a href="http://antirez.com/news/81">Diskless replication: a few design notes</a> как то я поздно обнаружил бложик разработчика Redis #redis #replication</li>
<li><a href="https://github.com/what-studio/profiling">Интерактивный профайлер для python</a> #python #profiler</li>
<li><a href="https://medium.com/the-year-of-the-looking-glass/junior-designers-vs-senior-designers-fbe483d3b51e">Очень понравилась иллюстрация различий между Junior vs. Senior дизайнером, и как мне кажется подходит для программистов тоже</a></li>
</ol>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linkstash #52]]></title>
        <id>https://yurtaev.link/2014/12/29/Linkstash-52</id>
        <link href="https://yurtaev.link/2014/12/29/Linkstash-52"/>
        <updated>2014-12-28T16:32:39.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>Глобальная карта ветров. С учетом того что я ~~дочитываю~~ дочитал <a href="http://goo.gl/QCKHDL">«На берегу»</a> очень интересно
<ul>
<li><a href="http://earth.nullschool.net/">http://earth.nullschool.net/</a></li>
<li><a href="https://www.windyty.com/">https://www.windyty.com/</a></li>
</ul>
</li>
<li><a href="http://kelly-mclaughlin.com/blog/2014/12/12/building-an-erlang-project-with-mix/">Building an Erlang Project With Mix</a> – mix хорош #erlang #elixir #rebar #mix</li>
<li><a href="http://cssstats.com/">Сервис который выдает статистику по css на сайте – количество селекторов, цветов, размеров и т.д</a> #css #tool #statistics #frontend</li>
<li><a href="http://www.evanmiller.org/start-ups-and-emotional-debt.html">Бро Evan Miller прорвало на серию прекрасных статей. Теперь про «Эмоциональный долг»</a> #thinking #Evan</li>
<li><a href="http://benanne.github.io/2014/08/05/spotify-cnns.html">Запоздалая но очень крутая статья о том как spotify строит рекомендации</a>. Spotify это единственный сервис которым я пользуюсь больше полугода и он не скатывается в унылые повторы как пандора или ластфм + подборки плейлистов просто то что мне надо. #spotify #bigdata #analysis #recommendations</li>
<li><a href="http://blog.plataformatec.com.br/2014/12/the-pros-and-cons-of-4-deployment-process-techniques/?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed%3A+PlataformaBlog+%28Plataformatec+Blog%29&amp;utm_content=FeedBurner">Из бложика plataformatec «The pros and cons of 4 deployment process techniques»</a> #deployment</li>
<li><a href="http://www.phoenixframework.org/v0.7.2/docs/overview">phoenix наконец-то запилил сайт под проект и маленький туториал. Но я всё еще хочу django а не рельсы на elixir :&#x27;(</a> #elixir #guides</li>
<li><a href="https://github.com/gorhill/uBlock">Более быстрая и легкая альтернатива для AdBlock, эффект плацебо, но мне на глаз кажется лучше</a> #extension #blocker #fast</li>
<li><a href="https://medium.com/@addyosmani/javascript-application-architecture-on-the-road-to-2015-d8125811101b">Эдди Османи размышляет на тему фронтенда в 2015 г.</a> #frontend #thinking</li>
</ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker как замена Homebrew]]></title>
        <id>https://yurtaev.link/2014/12/16/Docker-replace-Homebrew</id>
        <link href="https://yurtaev.link/2014/12/16/Docker-replace-Homebrew"/>
        <updated>2014-12-16T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<h2>Проблема</h2>
<p>После обновления на OS X Yosemite мне захотелось избавится от зависимости homebrew, не от homebrew как такового, а от установки при помощи него всяких mysql, postgres, redis и т.д. На самом деле из-за homebrew уже давно не накатываю обновления поверх старой системы, а делаю полностью новою установку с форматированием диска. Для этого есть несколько причин:</p>
<ul>
<li>Начинать с чистого листа всегда хорошо и можно избавится от кучи мусора что накопилось за предыдущий цикл жизни мажорной версии ОС</li>
<li>Обновления в моем случае никогда не накатываются гладко, не поломав при этот половину критичных вещей</li>
</ul>
<p>Чаще всего у меня ломаются серверные пакеты из homebrew (о ужас когда-то это был macports), и после обновления в 90% случаев сервер mysql оказывается в положение кота шредингера, он вроде есть, и в тоже время его нет. Ситуацию еще усугубляет python, наверное каждый python разработчик сталкивался с болью установки <code>mysql-python</code> под Mac OS (слава богам что для меня эти времена прошли).</p>
<p>Так вот, после обновления на Yosemite было решено попробовать docker для поднятия всех этих серверных «штук». Как поднимать docker под Mac OS подробно расписано в <a href="https://docs.docker.com/installation/mac/">документации</a>, я лишь скажу что использовать docker в сыром виде для этих целей не лучший вариант.</p>

<h2>Решение</h2>
<p>И тут на помощь приходит <a href="http://www.fig.sh/">Fig</a> который идеально прижился у меня. Всё что необходимо, это описать конфиг:</p>
<pre><code class="language-yaml">redis:
    image: redis
    ports:
        - &quot;6379:6379&quot;
postgres:
    image: postgres
    ports:
        - &quot;5432:5432&quot;
couchdb:
    image: &quot;klaemo/couchdb&quot;
    ports:
        - &quot;5984:5984&quot;
</code></pre>
<p>И дальше манипулировать контейнерами как угодно:</p>
<pre><code class="language-sh">$ fig up redis
# или запустить в фоне
$ fig up -d redis
# или запустить всё в фоне
$ fig up -d
$ fig ps

Name                     Command               State            Ports
-----------------------------------------------------------------------------
couchdb_1    /entrypoint.sh couchdb           Exit 0   0.0.0.0:5984-&gt;5984/tcp
postgres_1   /docker-entrypoint.sh postgres   Exit 0   0.0.0.0:5432-&gt;5432/tcp
redis_1      /entrypoint.sh redis-server      Up       0.0.0.0:6379-&gt;6379/tcp
</code></pre>
<p><code>Fig</code> достаточно гибкий в настройке. Можно например указать какие папки примаунтить в контейнер (для Mac OS <code>fig &gt;= 1.0.0</code>), полезно для БД, или указать что контейнеру нужен <code>privileged mode</code>, или поставить лимит на RAM, и т.п что можно указать напрямую для docker, только в удобном для редактирования yaml файле.</p>
<p>Единственная проблема которую решил не полностью, это отсутствие в хосте установленных клиентов типа <code>redis-cli</code> или <code>psql</code>, но обычно «хорошие» образы <a href="https://github.com/docker-library/docs/tree/master/redis#-or-via-redis-cli">позволяют</a> решить и это. Например для редиса я сделал себе alias:</p>
<pre><code class="language-sh">$ alias redis-cli=&quot;docker run -it --link yurtaev_redis_1:redis --rm redis sh -c
&gt; &#x27;exec redis-cli -h
&gt; \&quot;\$REDIS_PORT_6379_TCP_ADDR\&quot; -p \&quot;\$REDIS_PORT_6379_TCP_PORT\&quot;&#x27;&quot;
$ redis-cli
172.17.0.12:6379&gt; SET qwerty 213
</code></pre>
<p>А еще можно так:</p>
<pre><code class="language-sh">$ alias f=&quot;fig -f $HOME/fig.yml&quot;
$ f stop
</code></pre>
<p>и из любого места управлять контейнерами</p>
<h2>Итого</h2>
<h3>Плюсы</h3>
<ul>
<li>Решена проблема при накатывание обновления ОС</li>
<li>Можно поднимать то чего нет или очень старое в homebrew</li>
<li>Очень просто поднять несколько различных версий одного и того же сервера, полезно при тестирование на этапе разработки</li>
</ul>
<h3>Минусы</h3>
<ul>
<li>Нужно не забывать стартовать при включение машины boot2docker и fig, но кто-то еще выключает компьютеры?!</li>
<li>Требуется держать в фоне запущенный virtualbox который жрет ресурсы. Рекомендую уменьшить количество RAM и ядер для boot2docker</li>
<li>Для доступа к сервисам которые крутятся в docker нужно указывать ip адрес виртуальной машины (никакого localhost по умолчанию теперь). Я просто добавил в <code>/etc/hosts</code> отдельный хост который всегда указывает на <code>boot2docker ip</code></li>
<li>Docker очень любит кушать место на жестком диске</li>
</ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Parallels где ты был последние 10-ть лет?]]></title>
        <id>https://yurtaev.link/2014/12/15/docker-death-parallels</id>
        <link href="https://yurtaev.link/2014/12/15/docker-death-parallels"/>
        <updated>2014-12-15T00:22:02.000Z</updated>
        <content type="html"><![CDATA[<center><img src="/images/docker-100388953-orig.jpg" alt="docker - death to vmware, hyper-v and virtualbox"/></center>
<p><em>Хотел написать 140 слов о <a href="https://www.yahoo.com/tech/s/parallels-adopts-docker-next-cloud-220003984.html">Parallels adopts Docker in next Cloud Server release</a>, но меня как то понесло...</em></p>
<p>Я представляю как parallels кусает себе локти. Я нисколько не уменьшаю их заслуги в разработке тулов вокруг виртуализации, они очень много вложили в опенсоурс, но кто из обычных смертных за последние 10-ть лет хоть что-то пробовал запустить от parallels (кроме решения для домохозяек)? Или хотя бы задумывался над тем что продукты parallels могут решить какую-то повседневную проблему?</p>
<p>Docker поэтому и стрельнул т.к любой слабоумный может взять, один раз завернуть свое приложение и запускать его на серверах без боли. А деплой любого приложения это боль, и я всегда смеюсь когда кто-то говорит – «осталось совсем немного, только задеплоть за 15 минут», т.к сам был тем кто это говорил.</p>

<p>Во-первых надо менять процесс разработки, и с первого коммита должен быть непрерывный процесс объединенный с деплоем, если не на dev сервер, то как минимум в бокс vagrant. Это избавит в будущем от проблем когда в последний момент всплывает зависимость типа <code>libjpeg-dev</code> про которую забыли т.к её поставили один раз руками и всё. Плюс когда деплой интегрирован в разработку и происходит постоянно, так или иначе большинство проблем вылезут до этапа деплоя в продакшен, а так же при наличие ~~комплекса неполноценности~~ ~~неуверенности~~ <em>перфекциониста</em>, всегда будет не нравится то как это делается, и будет хоть понемногу, но улучшать этот процесс.</p>
<p>Во-вторых надо максимально упростить сам запуск приложения. Что происходило раньше:</p>
<ol>
<li>руками заходили на сервер или что хуже программировали на chef/puppet</li>
<li>воссоздавали среду необходимою для запуска приложения</li>
<li>строили и настраивали приложение</li>
<li>запускали</li>
</ol>
<p>Так вот второй этап всегда приносил больше всего боли, и причин этому много. Это и различные платформы, и зависимости которые требовали индивидуального подхода (костыли), и приложения соседи, и т.д.</p>
<p>Docker как раз решает эту проблему. Больше не надо нанимать «отдельного программиста» на chef для написания сотен строк рецепта для поднятия приложения. Деплой с docker упрощается и сводится только к тому как/чем распространить контейнер на сервера. В самом простом случае можно зайти руками на сервер и запустить пару команд для поднятия сложного приложения. Если инфраструктура сложнее то без какой либо системы управления не обойтись, но их конфигурация опять же упростится и будет сводится уже только к тому куда и какой контейнер залить.</p>
<p>Насколько сейчас видно, docker пытается пойти в нишу chef и сделать свои тулзы для управления кластерами, я это очень приветствую, хуже шефа они точно не сделают.</p>
<p>На словах это всё звучит как бред, но на практике меня это подкупило. Вот например как выглядит мой конфиг для запуска <a href="https://github.com/getsentry/sentry">sentry</a> сервера:</p>
<pre><code class="language-yaml">sentry:
  image: slafs/sentry
  ports:
    - &quot;80:9000&quot;
  links:
    - redis
  environment:
    SENTRY_URL_PREFIX: &quot;**********&quot;
    SECRET_KEY: &quot;**********&quot;
    SENTRY_ADMIN_USERNAME: &#x27;admin&#x27;
    SENTRY_ADMIN_PASSWORD: &quot;**********&quot;
    SENTRY_ADMIN_EMAIL: &quot;**********&quot;
    DATABASE_URL: &quot;**********&quot;
    SENTRY_REDIS_HOST: &#x27;redis_1&#x27;
    SENTRY_EMAIL_BACKEND: &#x27;django.core.mail.backends.smtp.EmailBackend&#x27;
    SENTRY_EMAIL_HOST: &#x27;smtp.mailgun.org&#x27;
    SENTRY_EMAIL_HOST_USER: &quot;**********&quot;
    SENTRY_EMAIL_HOST_PASSWORD: &quot;**********&quot;
    SENTRY_SERVER_EMAIL: &quot;**********&quot;
redis:
  image: redis
</code></pre>
<p>Всё что мне надо сделать на сервере это выполнить <code>fig up</code> и я получаю рабочее приложение.</p>
<p>Docker это не панацея и не решение всех проблем. Для больших проектов всё еще нужно средство для управления кластером и конфигурациями. Для сингл-сервер приложений, типа поднять сайтик на django + redis + postgres, docker сейчас самый мастхев.</p>
<p>Я бы очень хотел сказать что docker это самый лучший в мире инструмент, но я очень насторожено отношусь к людям который очень хвалят что либо. Поэтому сразу скажу что считаю docker еще тем говнищем, которое идет в ногу со временем и поощряет общую глупость массы людей. И мнимая простота docker вводит в заблуждения, и рано или поздно вдарит пользователю в щи, документацию ведь никто не читает, а на всех выступлениях нам показывают как супер просто за 5-ть минут поднять сложнейшее приложение, но никто не рассказывает про боль с которой можно столкнутся. Например каждый второй контейнер на https://registry.hub.docker.com/ вообще не предусматривает ситуации когда приложение крешнится (да я знаю что можно решить на стороне хоста, но про это тоже не рассказывают), или правильной настройкой логгирования для того что бы потом не искать по всей системе причины падения.</p>
<p>Как и любое помешательство на чем либо, всеобщая истерия про docker плохо, но она указывает на проблему которую до сих пор не решили. Еще кстати вопрос насколько это большая истерия, и сколько людей на самом деле это волнует, и сколько вообще слышало про docker, но это уже другая тема по поводу которой меня может занести еще дальше.</p>
<p>P.S я не имею реального опыта по управлению кластерами, все мой рассуждения для задач когда приложение не требует кластера из десятков серверов.</p>
<p>P.P.S и да я не осилил chef/puppet, я их считаю дерьмовыми продуктами для разворачивания приложения на один сервер. Варианты делать rpm/deb пакеты даже не хочу рассматривать, кажется что это решит проблемы, но будет n+1 проблема.</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linkstash #50]]></title>
        <id>https://yurtaev.link/2014/12/13/Linkstash-50</id>
        <link href="https://yurtaev.link/2014/12/13/Linkstash-50"/>
        <updated>2014-12-13T13:53:26.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li><a href="http://www.evanmiller.org/you-cant-dig-upwards.html">Самый крутой бро Evan Miller четко сформулировал почему &quot;Python&quot; плох как первый язык. И то почему все мой подходы к Си закончились так и не успев начаться</a> #thinking #Evan</li>
<li><a href="http://www.fse.guru/2-years-with-angular">2 years with Angular</a> <em>Verdict: good enough (not really)</em> Почти согласен с выводами, ангуляр не прощает глупость разработчика <em>(а сейчас во фронтенде это 90% разработчиков)</em>, но ангуляр дает почти все инструменты для разработки сложного приложения. И да, он не совсем объясняет как правильно пользоваться всеми инструментами, и поэтому иногда получается что отверткой забивают гвозди, а молотком ударяют по пальцам, но при этом инвестировав в изучение оно скорее всего окупится. Я был не сильно рад когда сообщили что angular 2.0  будет не совместим, но потом понял что у них есть все шансы при переписывание учесть все ошибки и сделать годное решение <em>(при этом точно появятся другие, но жизнь тоже не сразу зародилась)</em> #angularjs #frontend #thinking</li>
<li><a href="http://adambard.com/blog/clojure-is-not-for-geniuses/">Clojure is not for geniuses</a> #clojure #thinking</li>
<li><a href="http://natmchugh.blogspot.ru/2014/10/how-i-created-two-images-with-same-md5.html">How I created two images with the same MD5 hash</a> или еще раз почему не стоит использовать md5 #cryptography #security #md5</li>
</ul>

<ul>
<li><a href="http://sergeykorol.ru/blog/how-to-write-well/">Рецензия на «Как писать хорошо»</a> <strong>(не про код)</strong> P.S а так как я необразованный быдлан то мне помогают:
<ul>
<li>http://api.yandex.ru/speller/</li>
<li>http://glvrd.ru/</li>
<li>http://ru.readability.io/</li>
</ul>
</li>
<li><a href="https://blog.recurly.com/2014/05/clustering-redis-maximize-uptime-scale">Clustering redis to maximize uptime and scale</a> Прошло три года, а я так и не дождался redis cluster. #redis</li>
<li><a href="http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html">async vs. defer attributes</a> Простота залог успеха #frontend #browser</li>
<li><a href="http://www.sencha.com/blog/apple-shows-love-for-html5-with-ios-8">Apple Shows Love for HTML5 with iOS 8</a> Очень подробно про новинки WebView в iOS8 #ios #frontend</li>
<li><a href="https://speakerdeck.com/addyosmani/javascript-memory-management-masterclass">JavaScript Memory Management Masterclass</a> Очень, очень подробно, а потом я включил видео... Ах да, это же Эдди ^_^ #frontend #javascript #memory #slides #video</li>
<li>Самый лучший доклад этого полугодия – <a href="http://www.youtube.com/watch?v=mGz_MExn6qQ&amp;feature=youtu.be">Почему я пишу хороший код, но его не ценят</a> #video #best #thinking #slides</li>
<li><a href="http://www.presslabs.com/gitfs/">gitfs</a> FUSE драйвер для git!!! Я вот думаю попробовать на папке с документами которые я пишу (в markdown конечно), а то иногда надо историю посмотреть, а dropbox в этом очень плох. P.S кстати почти втащил <a href="https://github.com/s3fs-fuse/s3fs-fuse">s3fs</a> в продакшен, и пока оно даже работает #git #fuse</li>
</ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linkstash #37]]></title>
        <id>https://yurtaev.link/2014/09/08/Linkstash-37</id>
        <link href="https://yurtaev.link/2014/09/08/Linkstash-37"/>
        <updated>2014-09-08T01:36:16.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li><a href="http://tonsky.livejournal.com/293723.html">Правильные мысли про стандартизацию JSON API</a> #json #rest #api</li>
<li><a href="https://www.easycron.com/">гениальный сервис cron как SaaS</a> #cron #service #automation #scheduling #online #webhooks</li>
<li><a href="http://www.sitepoint.com/3-new-javascript-apis-may-want-follow/">3 новыйх js API про которые я и правда не знал</a> #javascript #api #frontend</li>
<li><a href="http://studentduniya.in/difference-undefined-null-value-javascript">различия между  <code>undefined</code> and <code>null</code></a> #js #frontend #null #undefined</li>
<li><a href="http://javascriptplayground.com/the-refactoring-tales/refactoring-tales.html">хорошие советы по рефакторингу js</a> #javascript #hints #refactoring #frontend</li>
<li><a href="http://blog.oxrud.com/posts/creating-youtube-directive/">Creating a YouTube AngularJS Directive</a> #angularjs #tutorial #frontend</li>
<li><a href="http://davidwalsh.name/es6-generators">Про генераторы в es6, и почему только сейчас они появляются?!</a> #javascript #es6 #generators</li>
</ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linkstash #36]]></title>
        <id>https://yurtaev.link/2014/09/01/Linkstash-36</id>
        <link href="https://yurtaev.link/2014/09/01/Linkstash-36"/>
        <updated>2014-09-01T01:34:32.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li><a href="http://semanticweb.com/j-son-ld-official-web-standard_b41441">JSON-LD очередная попытка стандартизирвоать JSON для REST API, что люди только не делают лишь бы не использовать протобаф</a> #json #json-ld</li>
<li><a href="http://shahriar.svbtle.com/pythons-else-clause-in-loops">неочевидный очевидный <code>else</code> в циклах</a> #python #hints #loop #else</li>
<li><a href="http://blog.newrelic.com/2014/07/15/geekspeak-data/">10 Things Non-Developers Love To Say To Developers</a> #numbers #blabla</li>
<li><a href="http://www.fig.sh/">Еще одна альтернатива умершему maestro для создания docker контейнеров</a> #docker #containers #environments #manage</li>
<li><a href="http://mitmproxy.org/">Тулза для анализа трафика на python, надо пощюпать как оно в деле</a> #python #proxy #security #tools #testing #mitm #development #python</li>
<li><a href="http://css.yoksel.ru/svg-stroke/">Странности обводки в SVG</a> #svg #workaround #hack</li>
<li><a href="http://www.toptal.com/python/interview-questions">5 Great Python Interview Questions</a> #python #questions</li>
<li><a href="http://toddmotto.com/opinionated-angular-js-styleguide-for-teams/?utm_content=bufferc3e59&amp;utm_medium=social&amp;utm_source=plus.google.com&amp;utm_campaign=buffer">Бла бла про тимстайлгайд по разработке на angularjs</a> #angularjs #styleguide</li>
<li><a href="http://readwrite.com/2014/07/24/object-observe-javascript-api-impact">Коротко про observe в ES6, есть более подробные статьй</a> #frontend #javascript #es6 #observe</li>
<li><a href="https://www.djangoproject.com/weblog/2014/jul/27/17rc2/">RC 2 django 1.7 уже просрали все даты выпуска на 2 месяца</a> #django</li>
</ul>]]></content>
    </entry>
</feed>